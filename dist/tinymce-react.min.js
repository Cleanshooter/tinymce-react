var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/Events", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/TinyMCE", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var getGlobal = function () { return (typeof window !== 'undefined' ? window : global); };
    var getTinymce = function () {
        var global = getGlobal();
        return global && global.tinymce ? global.tinymce : null;
    };
    exports.getTinymce = getTinymce;
});
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/components/Editor", ["require", "exports", "react", "main/ts/ScriptLoader", "main/ts/TinyMCE", "main/ts/Utils", "main/ts/components/EditorPropTypes"], function (require, exports, React, ScriptLoader, TinyMCE_1, Utils_1, EditorPropTypes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var scriptState = ScriptLoader.create();
    var Editor = /** @class */ (function (_super) {
        __extends(Editor, _super);
        function Editor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.element = null;
            _this.initialise = function () {
                var finalInit = __assign({}, _this.props.init, { target: _this.element, readonly: _this.props.disabled, inline: _this.inline, plugins: Utils_1.mergePlugins(_this.props.init && _this.props.init.plugins, _this.props.plugins), toolbar: _this.props.toolbar || (_this.props.init && _this.props.init.toolbar), setup: function (editor) {
                        _this.editor = editor;
                        editor.on('init', function (e) {
                            _this.initEditor(e, editor);
                        });
                        if (_this.props.init && typeof _this.props.init.setup === 'function') {
                            _this.props.init.setup(editor);
                        }
                    } });
                if (Utils_1.isTextarea(_this.element)) {
                    _this.element.style.visibility = '';
                }
                TinyMCE_1.getTinymce().init(finalInit);
            };
            return _this;
        }
        Editor.prototype.componentWillMount = function () {
            this.id = this.id || this.props.id || Utils_1.uuid('tiny-react');
            this.inline = this.props.inline ? this.props.inline : this.props.init && this.props.init.inline;
        };
        Editor.prototype.componentDidMount = function () {
            if (TinyMCE_1.getTinymce() !== null) {
                this.initialise();
            }
            else if (this.element && this.element.ownerDocument) {
                var doc = this.element.ownerDocument;
                var channel = this.props.cloudChannel;
                var apiKey = this.props.apiKey ? this.props.apiKey : '';
                ScriptLoader.load(scriptState, doc, "https://cloud.tinymce.com/" + channel + "/tinymce.min.js?apiKey=" + apiKey, this.initialise);
            }
        };
        Editor.prototype.componentWillUnmount = function () {
            if (TinyMCE_1.getTinymce() !== null) {
                TinyMCE_1.getTinymce().remove(this.editor);
            }
        };
        Editor.prototype.componentWillReceiveProps = function (nextProps) {
            if (this.editor && this.editor.initialized) {
                this.currentContent = this.currentContent || this.editor.getContent();
                if (typeof nextProps.value === 'string' && nextProps.value !== this.props.value && nextProps.value !== this.currentContent) {
                    this.editor.setContent(nextProps.value);
                }
                if (typeof nextProps.disabled === 'boolean' && nextProps.disabled !== this.props.disabled) {
                    this.editor.setMode(nextProps.disabled ? 'readonly' : 'design');
                }
            }
        };
        Editor.prototype.render = function () {
            return this.inline ? this.renderInline() : this.renderIframe();
        };
        Editor.prototype.initEditor = function (initEvent, editor) {
            var _this = this;
            var value = typeof this.props.value === 'string' ? this.props.value : typeof this.props.initialValue === 'string' ? this.props.initialValue : '';
            editor.setContent(value);
            if (Utils_1.isFunction(this.props.onEditorChange)) {
                editor.on('change keyup setcontent', function (e) {
                    _this.currentContent = editor.getContent();
                    if (Utils_1.isFunction(_this.props.onEditorChange)) {
                        _this.props.onEditorChange(_this.currentContent, editor);
                    }
                });
            }
            Utils_1.bindHandlers(this.props, editor, initEvent);
        };
        Editor.prototype.renderInline = function () {
            var _this = this;
            var _a = this.props.tagName, tagName = _a === void 0 ? 'div' : _a;
            return React.createElement(tagName, {
                ref: function (elm) { return (_this.element = elm); },
                id: this.id
            });
        };
        Editor.prototype.renderIframe = function () {
            var _this = this;
            return React.createElement("textarea", { ref: function (elm) { return (_this.element = elm); }, style: { visibility: 'hidden' }, id: this.id, name: this.props.textareaName });
        };
        Editor.propTypes = EditorPropTypes_1.EditorPropTypes;
        Editor.defaultProps = {
            cloudChannel: '5'
        };
        return Editor;
    }(React.Component));
    exports.Editor = Editor;
});
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/components/EditorPropTypes", ["require", "exports", "prop-types"], function (require, exports, PropTypes) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.eventPropTypes = {
        onActivate: PropTypes.func,
        onAddUndo: PropTypes.func,
        onBeforeAddUndo: PropTypes.func,
        onBeforeExecCommand: PropTypes.func,
        onBeforeGetContent: PropTypes.func,
        onBeforeRenderUI: PropTypes.func,
        onBeforeSetContent: PropTypes.func,
        onBeforePaste: PropTypes.func,
        onBlur: PropTypes.func,
        onChange: PropTypes.func,
        onClearUndos: PropTypes.func,
        onClick: PropTypes.func,
        onContextMenu: PropTypes.func,
        onCopy: PropTypes.func,
        onCut: PropTypes.func,
        onDblclick: PropTypes.func,
        onDeactivate: PropTypes.func,
        onDirty: PropTypes.func,
        onDrag: PropTypes.func,
        onDragDrop: PropTypes.func,
        onDragEnd: PropTypes.func,
        onDragGesture: PropTypes.func,
        onDragOver: PropTypes.func,
        onDrop: PropTypes.func,
        onExecCommand: PropTypes.func,
        onFocus: PropTypes.func,
        onFocusIn: PropTypes.func,
        onFocusOut: PropTypes.func,
        onGetContent: PropTypes.func,
        onHide: PropTypes.func,
        onInit: PropTypes.func,
        onKeyDown: PropTypes.func,
        onKeyPress: PropTypes.func,
        onKeyUp: PropTypes.func,
        onLoadContent: PropTypes.func,
        onMouseDown: PropTypes.func,
        onMouseEnter: PropTypes.func,
        onMouseLeave: PropTypes.func,
        onMouseMove: PropTypes.func,
        onMouseOut: PropTypes.func,
        onMouseOver: PropTypes.func,
        onMouseUp: PropTypes.func,
        onNodeChange: PropTypes.func,
        onObjectResizeStart: PropTypes.func,
        onObjectResized: PropTypes.func,
        onObjectSelected: PropTypes.func,
        onPaste: PropTypes.func,
        onPostProcess: PropTypes.func,
        onPostRender: PropTypes.func,
        onPreProcess: PropTypes.func,
        onProgressState: PropTypes.func,
        onRedo: PropTypes.func,
        onRemove: PropTypes.func,
        onReset: PropTypes.func,
        onSaveContent: PropTypes.func,
        onSelectionChange: PropTypes.func,
        onSetAttrib: PropTypes.func,
        onSetContent: PropTypes.func,
        onShow: PropTypes.func,
        onSubmit: PropTypes.func,
        onUndo: PropTypes.func,
        onVisualAid: PropTypes.func
    };
    exports.EditorPropTypes = __assign({ apiKey: PropTypes.string, id: PropTypes.string, inline: PropTypes.bool, init: PropTypes.object, initialValue: PropTypes.string, onEditorChange: PropTypes.func, value: PropTypes.string, tagName: PropTypes.string, cloudChannel: PropTypes.string, plugins: PropTypes.oneOfType([PropTypes.string, PropTypes.array]), toolbar: PropTypes.oneOfType([PropTypes.string, PropTypes.array]), disabled: PropTypes.bool, textareaName: PropTypes.string }, exports.eventPropTypes);
});
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/Utils", ["require", "exports", "main/ts/components/EditorPropTypes"], function (require, exports, EditorPropTypes_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isValidKey = function (keys) { return function (key) { return keys.indexOf(key) !== -1; }; };
    // tslint:disable-next-line:ban-types
    exports.isFunction = function (x) { return typeof x === 'function'; };
    exports.bindHandlers = function (props, editor, initEvent) {
        Object.keys(props)
            .filter(isValidKey(Object.keys(EditorPropTypes_2.eventPropTypes)))
            .forEach(function (key) {
            var handler = props[key];
            if (exports.isFunction(handler)) {
                if (key === 'onInit') {
                    handler(initEvent, editor);
                }
                else {
                    editor.on(key.substring(2), function (e) { return handler(e, editor); });
                }
            }
        });
    };
    var unique = 0;
    exports.uuid = function (prefix) {
        var date = new Date();
        var time = date.getTime();
        var random = Math.floor(Math.random() * 1000000000);
        unique++;
        return prefix + '_' + random + unique + String(time);
    };
    exports.isTextarea = function (element) {
        return element !== null && element.tagName.toLowerCase() === 'textarea';
    };
    var normalizePluginArray = function (plugins) {
        if (typeof plugins === 'undefined' || plugins === '') {
            return [];
        }
        return Array.isArray(plugins) ? plugins : plugins.split(' ');
    };
    exports.mergePlugins = function (initPlugins, inputPlugins) {
        return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));
    };
});
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/ScriptLoader", ["require", "exports", "main/ts/Utils"], function (require, exports, Utils_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var injectScriptTag = function (scriptId, doc, url, callback) {
        var scriptTag = doc.createElement('script');
        scriptTag.type = 'application/javascript';
        scriptTag.id = scriptId;
        scriptTag.addEventListener('load', callback);
        scriptTag.src = url;
        if (doc.head) {
            doc.head.appendChild(scriptTag);
        }
    };
    exports.create = function () {
        return {
            listeners: [],
            scriptId: Utils_2.uuid('tiny-script'),
            scriptLoaded: false
        };
    };
    exports.load = function (state, doc, url, callback) {
        if (state.scriptLoaded) {
            callback();
        }
        else {
            state.listeners.push(callback);
            if (!doc.getElementById(state.scriptId)) {
                injectScriptTag(state.scriptId, doc, url, function () {
                    state.listeners.forEach(function (fn) { return fn(); });
                    state.scriptLoaded = true;
                });
            }
        }
    };
});
/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
define("main/ts/index", ["require", "exports", "main/ts/components/Editor"], function (require, exports, Editor_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Editor = Editor_1.Editor;
});
define("test/ts/alien/Loader", ["require", "exports", "@ephox/agar", "@ephox/katamari", "react", "react-dom", "main/ts/TinyMCE", "main/ts/components/Editor", "tinymce/tinymce"], function (require, exports, agar_1, katamari_1, React, ReactDOM, TinyMCE_2, Editor_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var setTinymceBaseUrl = function (baseUrl) {
        var tinymce = TinyMCE_2.getTinymce();
        var prefix = document.location.protocol + '//' + document.location.host;
        tinymce.baseURL = baseUrl.indexOf('://') === -1 ? prefix + baseUrl : baseUrl;
        tinymce.baseURI = new tinymce.util.URI(tinymce.baseURL);
    };
    var getTestEditor = function (onLoaded) {
        return function (props) {
            var originalInit = props.init || {};
            var originalSetup = originalInit.setup || katamari_1.Fun.noop;
            var ref = React.createRef();
            var init = __assign({}, originalInit, { setup: function (editor) {
                    originalSetup(editor);
                    editor.on('SkinLoaded', function () {
                        setTimeout(function () {
                            onLoaded(editor, ref);
                        }, 0);
                    });
                } });
            setTinymceBaseUrl(init.base_url || "/project/node_modules/tinymce");
            return React.createElement(Editor_2.Editor, __assign({ ref: ref }, props, { init: init }));
        };
    };
    var cSetup = function (createElement) {
        return agar_1.Chain.async(function (_, next, die) {
            var root = document.createElement('div');
            document.body.appendChild(root);
            var onEditorLoaded = function (editor, ref) {
                katamari_1.Option.from(ref.current)
                    .map(ReactDOM.findDOMNode)
                    .filter(function (val) { return val instanceof Element; })
                    .fold(function () { return die('Could not find DOMNode'); }, function (DOMNode) {
                    next({
                        ref: ref,
                        root: root,
                        editor: editor,
                        DOMNode: DOMNode
                    });
                });
            };
            var testEditor = getTestEditor(onEditorLoaded);
            var editorElement = createElement(testEditor);
            ReactDOM.render(editorElement, root);
        });
    };
    exports.cSetup = cSetup;
    var cRemove = agar_1.Chain.op(function (res) {
        ReactDOM.unmountComponentAtNode(res.root);
    });
    exports.cRemove = cRemove;
    var cNamedChainDirect = function (name) { return agar_1.NamedChain.direct(agar_1.NamedChain.inputName(), agar_1.Chain.mapper(function (res) { return res[name]; }), name); };
    exports.cNamedChainDirect = cNamedChainDirect;
    var cDOMNode = function (chain) {
        return agar_1.NamedChain.asChain([
            cNamedChainDirect('DOMNode'),
            agar_1.NamedChain.read('DOMNode', chain),
            agar_1.NamedChain.outputInput
        ]);
    };
    exports.cDOMNode = cDOMNode;
    var cEditor = function (chain) {
        return agar_1.NamedChain.asChain([
            cNamedChainDirect('editor'),
            agar_1.NamedChain.read('editor', chain),
            agar_1.NamedChain.outputInput
        ]);
    };
    exports.cEditor = cEditor;
});
define("test/ts/alien/TestHelpers", ["require", "exports", "@ephox/agar"], function (require, exports, agar_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EventState = function () {
        var state = {};
        var handler = function (name) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                state[name] = args;
            };
        };
        var get = function (name) {
            return state[name];
        };
        var cEach = function (name, doAssert) {
            return agar_2.Chain.fromChains([
                agar_2.Chain.op(function () { return agar_2.Assertions.assertEq(name + ' should exist', true, !!state[name]); }),
                agar_2.Chain.op(function () {
                    doAssert(state[name]);
                })
            ]);
        };
        return {
            cEach: cEach,
            handler: handler,
            get: get
        };
    };
    exports.EventState = EventState;
});
define("test/ts/browser/EditorBehaviorTest", ["require", "exports", "@ephox/agar", "@ephox/bedrock", "react", "test/ts/alien/Loader", "@ephox/mcagar", "main/ts/TinyMCE", "test/ts/alien/TestHelpers"], function (require, exports, agar_3, bedrock_1, React, Loader_1, mcagar_1, TinyMCE_3, TestHelpers_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bedrock_1.UnitTest.asynctest('Editor.test', function (success, failure) {
        var isEditor = function (val) {
            return val instanceof TinyMCE_3.getTinymce().Editor;
        };
        var state = TestHelpers_1.EventState();
        agar_3.Pipeline.async({}, [
            agar_3.Logger.t('Assert structure of editor and react wrapper events', agar_3.Chain.asStep({}, [
                Loader_1.cSetup(function (Editor) { return (React.createElement(Editor, { onEditorChange: state.handler('onEditorChange'), onSetContent: state.handler('onSetContent') })); }),
                Loader_1.cEditor(mcagar_1.ApiChains.cSetContent('<p>New Content</p>')),
                state.cEach('onEditorChange', function (args) { return agar_3.Assertions.assertEq('First arg should be new content', '<p>New Content</p>', args[0]); }),
                state.cEach('onEditorChange', function (args) { return agar_3.Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
                state.cEach('onSetContent', function (args) { return agar_3.Assertions.assertEq('First arg should be something', true, !!args[0]); }),
                state.cEach('onSetContent', function (args) { return agar_3.Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
                Loader_1.cRemove
            ]))
        ], success, failure);
    });
});
define("test/ts/browser/EditorInitTest", ["require", "exports", "@ephox/agar", "@ephox/bedrock", "react", "test/ts/alien/Loader"], function (require, exports, agar_4, bedrock_2, React, Loader_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    bedrock_2.UnitTest.asynctest('Editor.test', function (success, failure) {
        var cAssertProperty = function (propName, expected) {
            return agar_4.Chain.op(function (el) {
                agar_4.Assertions.assertEq(propName + ' should be ' + expected, el[propName], expected);
            });
        };
        agar_4.Pipeline.async({}, [
            agar_4.Logger.t('tagName prop changes element', agar_4.GeneralSteps.sequence([
                agar_4.Logger.t('it is div by default for inline', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, { inline: true }); }),
                    Loader_2.cDOMNode(cAssertProperty('tagName', 'DIV')),
                    Loader_2.cRemove
                ])),
                agar_4.Logger.t('can be set to inline in init', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, { init: { inline: true } }); }),
                    Loader_2.cDOMNode(cAssertProperty('tagName', 'DIV')),
                    Loader_2.cRemove
                ])),
                agar_4.Logger.t('it can be changed to p', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, { inline: true, tagName: 'p' }); }),
                    Loader_2.cDOMNode(cAssertProperty('tagName', 'P')),
                    Loader_2.cRemove
                ])),
                agar_4.Logger.t('iframe editor does not change element', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, { tagName: 'p' }); }),
                    Loader_2.cDOMNode(cAssertProperty('tagName', 'TEXTAREA')),
                    Loader_2.cRemove
                ]))
            ])),
            agar_4.Logger.t('id is set automatically if id prop not provided', agar_4.GeneralSteps.sequence([
                agar_4.Logger.t('is set normally if prop is provided', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, { id: 'test' }); }),
                    Loader_2.cDOMNode(cAssertProperty('id', 'test')),
                    Loader_2.cRemove
                ])),
                agar_4.Logger.t('gets set automatically to uuid if not set', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, null); }),
                    Loader_2.cDOMNode(agar_4.Chain.op(function (node) {
                        agar_4.Assertions.assertEq('Should not be uuid', typeof node.id === 'string' && node.id.indexOf('tiny-react') !== -1, true);
                    })),
                    Loader_2.cRemove
                ])),
            ])),
            agar_4.Logger.t('sets name on form', agar_4.GeneralSteps.sequence([
                agar_4.Logger.t('is not set when prop is not provided', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, null); }),
                    Loader_2.cDOMNode(cAssertProperty('name', '')),
                    Loader_2.cRemove
                ])),
                agar_4.Logger.t('is set when prop is provided', agar_4.Chain.asStep({}, [
                    Loader_2.cSetup(function (Editor) { return React.createElement(Editor, { textareaName: 'test' }); }),
                    Loader_2.cDOMNode(cAssertProperty('name', 'test')),
                    Loader_2.cRemove
                ])),
            ])),
        ], success, failure);
    });
});
